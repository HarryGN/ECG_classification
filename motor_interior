/* 
 * File:   main.c
 * Author: MasonC
 *
 * Created on November 8, 2022, 10:19 PM
 */

#include <stdio.h>
#include <stdlib.h>




// PIC16F18313 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FEXTOSC = OFF    // FEXTOSC External Oscillator mode Selection bits (Oscillator not enabled)
#pragma config RSTOSC = HFINT32  // Power-up default value for COSC bits (HFINTOSC (1MHz))
#pragma config CLKOUTEN = OFF   // Clock Out Enable bit (CLKOUT function is disabled; I/O or oscillator function on OSC2)
#pragma config CSWEN = OFF      // Clock Switch Enable bit (The NOSC and NDIV bits cannot be changed by user software)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable (Fail-Safe Clock Monitor is disabled)

// CONFIG2
#pragma config MCLRE = ON       // Master Clear Enable bit (MCLR/VPP pin function is MCLR; Weak pull-up enabled )
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config WDTE = ON       // Watchdog Timer Enable bits (WDT disabled; SWDTEN is ignored)
#pragma config LPBOREN = OFF    // Low-power BOR enable bit (ULPBOR disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bits (Brown-out Reset disabled)
#pragma config BORV = LOW       // Brown-out Reset Voltage selection bit (Brown-out voltage (Vbor) set to 2.45V)
#pragma config PPS1WAY = OFF    // PPSLOCK bit One-Way Set Enable bit (The PPSLOCK bit can be set and cleared repeatedly (subject to the unlock sequence))
#pragma config STVREN = ON      // Stack Overflow/Underflow Reset Enable bit (Stack Overflow or Underflow will cause a Reset)
#pragma config DEBUG = OFF      // Debugger enable bit (Background debugger disabled)

// CONFIG3
#pragma config WRT = OFF        // User NVM self-write protection bits (Write protection off)
#pragma config LVP = OFF         // Low Voltage Programming Enable bit (Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE configuration bit is ignored.)

// CONFIG4
#pragma config CP = OFF         // User NVM Program Memory Code Protection bit (User NVM code protection disabled)
#pragma config CPD = OFF        // Data NVM Memory Code Protection bit (Data NVM code protection disabled)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.
#include <xc.h>
#include <stdint.h>
#include <stdlib.h>
#define _XTAL_FREQ  32000000     // Set clock frequency 

uint8_t mode = 1; //0 for squre-pwm, 1 for sine-pwm
uint8_t buffer = 0;//uart recv buffer

uint8_t duty_index = 3; //0-3 corresponding 3/16, 7/16, 11/16, 15/16 of duty cycle for square wave
                                          //12.5%, 25%, 50%, 100% for sine wave 
uint8_t duty_array[] = {1, 3, 6, 7};
uint8_t freq_index = 0; //0-3 modes of frequency adjustments


// Sine table contains pre-calculated values of sin(x)
//resolution: 32
uint8_t sine_table[] = {
128,152,176,198,218,234,245,253,
255,253,245,234,218,198,176,152,
128,103,79,57,37,21,10,2,
0,2,10,21,37,57,79,103};

uint8_t PR_val[] = {173, 111, 86, 64}; // for 90, 140, 180 240hz
// Index into sine table
uint8_t index = 0;
uint8_t state = 0; //is the board being addressed by the controller

void init_ccp(void) {
    // Set PA0, PA1 Pin as output
    TRISA0 = 1;//first set the flag, remove later
    TRISA1 = 1;
    ANSELA = 0; // all digital
    WPUA = 0; // weak pullup
    //RA1PPS = 12; // Output CCP1 to RA1
    RA1PPS = 0b01000; //get cwg1a
    RA0PPS = 0b01001;//get cwg1b
    // Set CCP1CON register to PWM mode
    CCP1CON = 0b10011111;//FMT = 1
    CCP1IE = 1;
    CCP1IF = 1;
    // Enable Global Interrupts
    GIE = 1;
    
    // Enable Peripheral Interrupts
    PEIE = 1;
    TMR2IE = 1; //enable interrupt on timer2
    // Set PR2 with appropriate PWM period
    
    // Set Timer2 Control Register
    T2CON = 0b00000010; // Timer 2 PS1/16 setting
    PR2 = PR_val[freq_index];
    
    //set cwg
  
    CWG1CON0 = 0b01000100;//half bridge, disable
    CWG1CON1 = 0;//A--non-invert, B--invert, C--non-invert, D--invert
    CWG1DAT = 0b00000011;//set data input to ccp1
    CWG1AS0 = 0b01111000;//disable autoshutdown, all 0 when shutdown occurs
    CWG1DBR = 0b111111;
    CWG1DBF = 0b111111;
    CWG1CLKCON = 1; //select hfint clk
    CWG1CON0bits.EN = 1;
    TMR2ON = 1;//ccp enable
    __delay_us(50);
}
void usart_init() {
    TRISA5 = 1; //port 5 as RXinput
    TRISA2 = 1; //port 2 as TXout
    ANSELA = 0;
    RXPPS = 0b00101; //port5 RX
    RA2PPS = 0b10100; //port2 TX

    RC1STA = 0b10010000; // 8 bit continuous reception CREN = 1 SPEN = 1
    TX1STA = 0b00100100; // Asynchronous reception High Baud Rate selection BRGH = 1  TXEN = 1; //transmit enable //async mode
    BAUD1CON = 0b00001000; // 16 bit SPBRG   BRG16 = 1
    SP1BRGH = 0;
    SP1BRGL = 68; // 115.2k baud rate
    RCIE = 1; //receive interrupt enable
    PEIE = 1;
    //IDLEN = 1; // Idle inhibits the CPU clk

    __delay_us(50); //wait for set up

}
//might later change UART to interrupt
void UART_Write(uint8_t data) {
    while(!TRMT){};
    TX1REG = data;
    
}

// Timer2 Interrupt Service Routine
void __interrupt() ISR(void) {

        if (RCIF) {
            RCIF = 0; // Clear The Flag
            buffer = RC1REG; // Read The Received Data Buffer
            if(buffer&0x01 == 1){
                    TMR2ON = 1;//ccp enable
                    TRISA0 = 0;
                    TRISA1 = 0;}
            
          else {
                    TMR2ON = 0;//ccp enable
                   TRISA0 = 1;
                   TRISA1 = 1;
            }

                
        }
        else if(CCP1IF){ //spwm
            // Clear Timer2 Interrupt Flag
            T2CON = 0b00000110;// Timer 2 PS1/16 setting
            PR2 = PR_val[freq_index]; //load freq
            // Update Duty Cycle
            ++index;
            if (index == 32) //wrap around
                index = 0;
            uint16_t loadval = sine_table[index] >> (3 - duty_index);
            loadval = loadval * (PR_val[freq_index]+1) / 255;
            if(loadval == 0){ //prevent 0 duty cycle loaded
                CCPR1H = 0x00;
                CCPR1L= 64;
            }
            else{
                CCPR1H = (uint8_t)loadval;
                CCPR1L= 0x00;
            }
            CCP1IF = 0; //clear flag
        }   
            
            
    

}

int main(int argc, char** argv) {
    TRISA4 = 0;
    // Initialize CCP Module
    WDTCON = 0b011010;
    usart_init();
    init_ccp();
    while(1){
           CLRWDT();
    }
}
